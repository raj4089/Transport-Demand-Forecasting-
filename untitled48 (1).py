# -*- coding: utf-8 -*-
"""Untitled48.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NFCLw6-gvqrHdU9_jrHRXk0JpqucNBhh
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
# Make sure to replace 'train_revised.csv' with the actual path to your file
df = pd.read_csv('/content/train_revised.csv')

# Convert travel_date to datetime
df['travel_date'] = pd.to_datetime(df['travel_date'], format='%d-%m-%y')

# Extract date/time features
df['hour'] = pd.to_datetime(df['travel_time'], errors='coerce').dt.hour
df['day_of_week'] = df['travel_date'].dt.dayofweek
df['month'] = df['travel_date'].dt.month
df['is_weekend'] = df['day_of_week'].isin([5,6]).astype(int)

# Compute target variable: number_of_tickets per ride_id
tickets_per_ride = df.groupby('ride_id').size().rename('number_of_tickets')
df = df.merge(tickets_per_ride, on='ride_id')

# Select features and target
features = ['hour', 'day_of_week', 'month', 'is_weekend', 'travel_from', 'car_type']
X = df[features]
y = df['number_of_tickets']

# One-hot encode categorical features
X = pd.get_dummies(X, columns=['travel_from', 'car_type'], drop_first=True)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Model training: Random Forest
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, y_train)

# Model training: Gradient Boosting
gb = GradientBoostingRegressor(random_state=42)
gb.fit(X_train, y_train)

# Evaluate models
def evaluate_model(model, X_test, y_test):
    preds = model.predict(X_test)
    mse = mean_squared_error(y_test, preds)
    mae = mean_absolute_error(y_test, preds)
    r2 = r2_score(y_test, preds)
    return mse, mae, r2

rf_mse, rf_mae, rf_r2 = evaluate_model(rf, X_test, y_test)
gb_mse, gb_mae, gb_r2 = evaluate_model(gb, X_test, y_test)

print(f"Random Forest - MSE: {rf_mse:.4f}, MAE: {rf_mae:.4f}, R2: {rf_r2:.4f}")
print(f"Gradient Boosting - MSE: {gb_mse:.4f}, MAE: {gb_mae:.4f}, R2: {gb_r2:.4f}")

# Hyperparameter tuning example for Random Forest (can be extended)
param_grid = {
    'n_estimators': [100, 200],
    'max_depth': [10, 20, None],
    'min_samples_split': [2, 5],
    'min_samples_leaf': [1, 2]
}
grid_search = GridSearchCV(rf, param_grid, cv=3, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search.fit(X_train, y_train)
best_rf = grid_search.best_estimator_

# Evaluate best model
best_rf_mse, best_rf_mae, best_rf_r2 = evaluate_model(best_rf, X_test, y_test)
print(f"Best RF Model - MSE: {best_rf_mse:.4f}, MAE: {best_rf_mae:.4f}, R2: {best_rf_r2:.4f}")

# Feature importance visualization
importances = pd.Series(best_rf.feature_importances_, index=X_train.columns).sort_values(ascending=False)
plt.figure(figsize=(10,6))
sns.barplot(x=importances.head(15), y=importances.head(15).index)
plt.title('Top 15 Feature Importances')
plt.tight_layout()
plt.show()

# Cross-validation for robustness
cv_scores = cross_val_score(best_rf, X_train, y_train, cv=5, scoring='neg_mean_squared_error')
print(f"Mean CV MSE: {-cv_scores.mean():.4f}")

# Sample predictions
sample_preds = best_rf.predict(X_test.head())
print("Sample predictions:", sample_preds)

# Visualize predicted vs. actual values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, best_rf.predict(X_test), alpha=0.5)
plt.xlabel("Actual Number of Tickets")
plt.ylabel("Predicted Number of Tickets")
plt.title("Actual vs. Predicted Number of Tickets (Random Forest)")
plt.grid(True)
plt.show()

# Analyze residuals
residuals = y_test - best_rf.predict(X_test)
plt.figure(figsize=(10, 6))
sns.histplot(residuals, kde=True)
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.title("Distribution of Residuals (Random Forest)")
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(best_rf.predict(X_test), residuals, alpha=0.5)
plt.xlabel("Predicted Number of Tickets")
plt.ylabel("Residuals")
plt.title("Residuals vs. Predicted Values (Random Forest)")
plt.axhline(y=0, color='r', linestyle='--')
plt.grid(True)
plt.show()

# Visualize predicted vs. actual values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, best_rf.predict(X_test), alpha=0.5)
plt.xlabel("Actual Number of Tickets")
plt.ylabel("Predicted Number of Tickets")
plt.title("Actual vs. Predicted Number of Tickets (Random Forest)")
plt.grid(True)
plt.show()

# Analyze residuals
residuals = y_test - best_rf.predict(X_test)
plt.figure(figsize=(10, 6))
sns.histplot(residuals, kde=True)
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.title("Distribution of Residuals (Random Forest)")
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(best_rf.predict(X_test), residuals, alpha=0.5)
plt.xlabel("Predicted Number of Tickets")
plt.ylabel("Residuals")
plt.title("Residuals vs. Predicted Values (Random Forest)")
plt.axhline(y=0, color='r', linestyle='--')
plt.grid(True)
plt.show()

